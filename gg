#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define N 20



typedef struct Stack {
    struct Node * head;
    int size;
}Stack;

typedef struct Node{
    int arr[5];
    int count;
    struct Node * next;
}Node;

Stack initStack (){
    Stack stack = {NULL, 0};
    return stack;
}


void push (Stack* stack, int num){
	if(!stack->head || stack->head->count == 4){
    		Node* node = malloc(sizeof(Node));
		node->count = 0;
    		node->arr[node->count] = num;
    		node->next = stack->head;
    		stack->head = node;
    		stack->size++;
	}
	else{
		Node* node = stack -> head;
		node->count++;
		node->arr[node->count] = num;
		stack->size++;
	}
}


int pop(Stack* stack){
	if (!stack->size)
		return 0;
	int res;
    Node* node = stack -> head;
	if (!node -> count){
    	stack->head = node->next;
    	res = node->arr[node->count];
    	free(node);
    	stack->size--;
	}
	else{
		res = node->arr[node->count];
		node->arr[node->count] = 0;
		node->count--;
	}
    return res;
}


int top(Stack* stack) {
   if (stack->head){
	   Node* node = stack -> head;
       return(node->arr[node->count]);
	}
   else{
           return 0;
       }
}


int sizeofStack(Stack* stack){
	return stack->size;
}



int main(){
	Stack stack = initStack();
	char* arr = (char*)malloc(N*sizeof(char));
	char* tok;
	int flag = 1;
	while(flag){
		
		fgets(arr, N, stdin);
		arr[strlen(arr)-1] = '\0';
		tok = strtok(arr, " ");

		if (!strcmp(tok, "push")){
			tok = strtok(NULL, " ");
			push(&stack, atoi(tok));
			printf("ok\n");
		}
		
		else if (!strcmp(tok, "pop")){
			if(!stack.size){
				printf("error\n");
				return 0;
			}
			printf("%d\n", pop(&stack));
		}

		else if (!strcmp(tok, "top")){
			if(!stack.size){
				printf("error\n");
				return 0;
			}
			printf ("%d\n", top(&stack));
		}
		
		else if(!strcmp(tok,"size"))
			printf("%d\n", sizeofStack(&stack));

		else if(!strcmp(tok, "exit")){
			printf("bye\n");
			flag = 0;
		}
		
		else{
			printf("error\n");
			return 0;
		
		}
	
	}
	return 0;
}
